#########################
----- UTF-8 BINDATA -----
#########################

UTF-8 Bindata is a unique program that can help you explore and debug text
and binary files. We will now show you some examples. The first is a text
file named "file0001.txt" created by the Text Pattern Generator (Textpatgen):

---------------------------------------------------------------------------

####################################
#
# -- TEXTPATGEN GENERATED FILE --
#
# -- A generated text file created from:
# -- tpl-decgen-001.c
#
# Start number: 0 ( 0x0 Hex, 00 Octal )
# Finish number: 99 ( 0x63 Hex, 0143 Octal )
# Numbers in a line: 10
#
####################################
D-0000 D-0001 D-0002 D-0003 D-0004 D-0005 D-0006 D-0007 D-0008 D-0009
D-0010 D-0011 D-0012 D-0013 D-0014 D-0015 D-0016 D-0017 D-0018 D-0019
D-0020 D-0021 D-0022 D-0023 D-0024 D-0025 D-0026 D-0027 D-0028 D-0029
D-0030 D-0031 D-0032 D-0033 D-0034 D-0035 D-0036 D-0037 D-0038 D-0039
D-0040 D-0041 D-0042 D-0043 D-0044 D-0045 D-0046 D-0047 D-0048 D-0049
D-0050 D-0051 D-0052 D-0053 D-0054 D-0055 D-0056 D-0057 D-0058 D-0059
D-0060 D-0061 D-0062 D-0063 D-0064 D-0065 D-0066 D-0067 D-0068 D-0069
D-0070 D-0071 D-0072 D-0073 D-0074 D-0075 D-0076 D-0077 D-0078 D-0079
D-0080 D-0081 D-0082 D-0083 D-0084 D-0085 D-0086 D-0087 D-0088 D-0089
D-0090 D-0091 D-0092 D-0093 D-0094 D-0095 D-0096 D-0097 D-0098 D-0099
# -- End of file.


--------------------------------------------------------------------------

We will now convert this file into a UTF-8 Bindata encoded file, by
entering this command:

  gcc encode-hex.c; ./a.out file0001.txt 1006 10 > file0001.c

and this is the resulting file, "file0001.c":

--------------------------------------------------------------------------

/*
####################################
#
# --- UTF-8 BINDATA ENCODED FILE ---
#
# Filename: file0001.txt
# Number of bytes read: 1006
# Number of bytes in a line: 10
#
# To decode this file back to its original
# state, use this command:
#
# gcc <this_filename>; ./a.out file0001.txt 1006
#
####################################
*/

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]);

long int num;
FILE *fp;
char filedata[] = {
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0A, 0x23, 0x0A, 0x23,
0x20, 0x2D, 0x2D, 0x20, 0x54, 0x45, 0x58, 0x54, 0x50, 0x41,
0x54, 0x47, 0x45, 0x4E, 0x20, 0x47, 0x45, 0x4E, 0x45, 0x52,
0x41, 0x54, 0x45, 0x44, 0x20, 0x46, 0x49, 0x4C, 0x45, 0x20,
0x2D, 0x2D, 0x0A, 0x23, 0x0A, 0x23, 0x20, 0x2D, 0x2D, 0x20,
0x41, 0x20, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x65,
0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x69, 0x6C,
0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
0x66, 0x72, 0x6F, 0x6D, 0x3A, 0x0A, 0x23, 0x20, 0x2D, 0x2D,
0x20, 0x74, 0x70, 0x6C, 0x2D, 0x64, 0x65, 0x63, 0x67, 0x65,
0x6E, 0x2D, 0x30, 0x30, 0x31, 0x2E, 0x63, 0x0A, 0x23, 0x0A,
0x23, 0x20, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x6E, 0x75,
0x6D, 0x62, 0x65, 0x72, 0x3A, 0x20, 0x30, 0x20, 0x28, 0x20,
0x30, 0x78, 0x30, 0x20, 0x48, 0x65, 0x78, 0x2C, 0x20, 0x30,
0x30, 0x20, 0x4F, 0x63, 0x74, 0x61, 0x6C, 0x20, 0x29, 0x0A,
0x23, 0x20, 0x46, 0x69, 0x6E, 0x69, 0x73, 0x68, 0x20, 0x6E,
0x75, 0x6D, 0x62, 0x65, 0x72, 0x3A, 0x20, 0x39, 0x39, 0x20,
0x28, 0x20, 0x30, 0x78, 0x36, 0x33, 0x20, 0x48, 0x65, 0x78,
0x2C, 0x20, 0x30, 0x31, 0x34, 0x33, 0x20, 0x4F, 0x63, 0x74,
0x61, 0x6C, 0x20, 0x29, 0x0A, 0x23, 0x20, 0x4E, 0x75, 0x6D,
0x62, 0x65, 0x72, 0x73, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20,
0x6C, 0x69, 0x6E, 0x65, 0x3A, 0x20, 0x31, 0x30, 0x0A, 0x23,
0x0A, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x30, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x30,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x30, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x30, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x30, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x30, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x30, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x30, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x30, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x30, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x31, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x31,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x31, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x31, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x31, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x31, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x31, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x31, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x31, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x31, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x32, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x32,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x32, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x32, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x32, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x32, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x32, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x32, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x32, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x32, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x33, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x33,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x33, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x33, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x33, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x33, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x33, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x33, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x33, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x33, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x34, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x34,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x34, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x34, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x34, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x34, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x34, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x34, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x34, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x34, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x35, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x35,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x35, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x35, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x35, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x35, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x35, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x35, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x35, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x35, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x36, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x36,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x36, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x36, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x36, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x36, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x36, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x36, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x36, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x36, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x37, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x37,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x37, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x37, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x37, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x37, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x37, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x37, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x37, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x37, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x38, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x38,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x38, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x38, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x38, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x38, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x38, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x38, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x38, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x38, 0x39, 0x0A, 0x44, 0x2D,
0x30, 0x30, 0x39, 0x30, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x39,
0x31, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x39, 0x32, 0x20, 0x44,
0x2D, 0x30, 0x30, 0x39, 0x33, 0x20, 0x44, 0x2D, 0x30, 0x30,
0x39, 0x34, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x39, 0x35, 0x20,
0x44, 0x2D, 0x30, 0x30, 0x39, 0x36, 0x20, 0x44, 0x2D, 0x30,
0x30, 0x39, 0x37, 0x20, 0x44, 0x2D, 0x30, 0x30, 0x39, 0x38,
0x20, 0x44, 0x2D, 0x30, 0x30, 0x39, 0x39, 0x0A, 0x23, 0x20,
0x2D, 0x2D, 0x20, 0x45, 0x6E, 0x64, 0x20, 0x6F, 0x66, 0x20,
0x66, 0x69, 0x6C, 0x65, 0x2E, 0x0A, 0xFFFFFFFF,
0x00 };


int main(int argc, char *argv[])
{
  fp=fopen(argv[1], "wb");  /* Open file */
  num=atol(argv[2]); /* Get the number of bytes to write */
  fwrite(&filedata[0], num, 1, fp);  /* Save the data in binary format */
  fclose(fp);
}

--------------------------------------------------------------------------

If you take a look at the filedata[] statement, you will see that it contains
the entire contents of "file0001.txt". It has 1006 bytes in total, and the data
is arranged with 10 bytes in a line of text. At the end of filedata[], you
will see a "0xFFFFFFFF". This indicates that the End-of-file has been reached,
and you will need to delete this "0xFFFFFFFF" manually, otherwise errors may
occur; Unfortunately, there is nothing I can do to stop this from happening
automatically.

To decode this file back to its original state, all you have to do is to use
this command:

  gcc file0001.c; ./a.out file0001.txt 1006

--------------------------------------------------------------------------
--------------------------------------------------------------------------

We will now take a look at another file named "file0001.bin". This is a pure
binary file created by using an "openssl rand 265 -out file0001.bin" command.
This file can be displayed by using "od -t x1 -w16 file0001.bin":

0000000 f7 f4 7b 0e 83 01 0d ed 1a 5b 81 2d b7 73 e3 c3
0000020 8c 19 a8 61 92 ed f2 b7 4f a8 b7 ac e2 ca 76 6c
0000040 cc 65 54 e7 29 17 83 ce 36 25 5a 2a 5f 40 27 77
0000060 95 0f 58 d0 ff 11 f3 2e 66 cc 70 bb 07 0f 5a 27
0000100 a2 2f b4 f4 9c 67 4a 10 d7 cb 50 51 df ff ec 7b
0000120 2b c4 4c 6c aa ed 8d db 85 11 56 df b4 c4 99 35
0000140 45 db 7f 1b a2 47 1b 0e b5 9e 80 9d a7 d6 56 96
0000160 49 3b e3 7e e6 c6 b3 07 e5 90 be 4d f1 e7 0d 0b
0000200 f5 8c 4a bb 15 5b b3 b0 07 69 e2 e9 a0 d0 40 1f
0000220 c0 1e 70 25 e0 9d 4f 7f 54 a1 23 96 29 0c 88 34
0000240 91 19 6a 35 e7 30 18 ab c4 c8 be 4a 3e 1d 76 9f
0000260 bb 71 16 66 ee ab a9 cd 0b 52 65 aa 76 e4 3f 4d
0000300 bf 61 89 b1 61 d9 9b 15 6d f1 4f ee 48 66 8b f1
0000320 e2 35 fa 2c 92 21 85 44 24 d1 d4 95 30 1e f6 ea
0000340 4c c6 93 85 f6 3f 17 70 cd 92 d8 36 23 57 27 07
0000360 2a 55 2a 03 d8 7f 37 02 5e b4 3b 4e b4 19 08 ab
0000400 f0 6a 8b fb ae f1 ce 50 f3
0000411

Or we could display a base-64 version of this file, using the command
"base64 -w 64 file0001.bin" and this is what you should see:

9/R7DoMBDe0aW4Ett3Pjw4wZqGGS7fK3T6i3rOLKdmzMZVTnKReDzjYlWipfQCd3
lQ9Y0P8R8y5mzHC7Bw9aJ6IvtPScZ0oQ18tQUd//7HsrxExsqu2N24URVt+0xJk1
Rdt/G6JHGw61noCdp9ZWlkk7437mxrMH5ZC+TfHnDQv1jEq7FVuzsAdp4umg0EAf
wB5wJeCdT39UoSOWKQyINJEZajXnMBirxMi+Sj4ddp+7cRZm7qupzQtSZap25D9N
v2GJsWHZmxVt8U/uSGaL8eI1+iySIYVEJNHUlTAe9upMxpOF9j8XcM2S2DYjVycH
KlUqA9h/NwJetDtOtBkIq/Bqi/uu8c5Q8w==


--------------------------------------------------------------------------

Once again, it was converted to UTF-8 Bindata by this command:

  gcc encode-hex.c; ./a.out file0001.bin 265 10 > file0001.c

and this is what "file0001.c" looks like:

--------------------------------------------------------------------------

/*
####################################
#
# --- UTF-8 BINDATA ENCODED FILE ---
#
# Filename: file0001.bin
# Number of bytes read: 265
# Number of bytes in a line: 10
#
# To decode this file back to its original
# state, use this command:
#
# gcc <this_filename>; ./a.out file0001.bin 265
#
####################################
*/

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[]);

long int num;
FILE *fp;
char filedata[] = {
0xF7, 0xF4, 0x7B, 0x0E, 0x83, 0x01, 0x0D, 0xED, 0x1A, 0x5B,
0x81, 0x2D, 0xB7, 0x73, 0xE3, 0xC3, 0x8C, 0x19, 0xA8, 0x61,
0x92, 0xED, 0xF2, 0xB7, 0x4F, 0xA8, 0xB7, 0xAC, 0xE2, 0xCA,
0x76, 0x6C, 0xCC, 0x65, 0x54, 0xE7, 0x29, 0x17, 0x83, 0xCE,
0x36, 0x25, 0x5A, 0x2A, 0x5F, 0x40, 0x27, 0x77, 0x95, 0x0F,
0x58, 0xD0, 0xFF, 0x11, 0xF3, 0x2E, 0x66, 0xCC, 0x70, 0xBB,
0x07, 0x0F, 0x5A, 0x27, 0xA2, 0x2F, 0xB4, 0xF4, 0x9C, 0x67,
0x4A, 0x10, 0xD7, 0xCB, 0x50, 0x51, 0xDF, 0xFF, 0xEC, 0x7B,
0x2B, 0xC4, 0x4C, 0x6C, 0xAA, 0xED, 0x8D, 0xDB, 0x85, 0x11,
0x56, 0xDF, 0xB4, 0xC4, 0x99, 0x35, 0x45, 0xDB, 0x7F, 0x1B,
0xA2, 0x47, 0x1B, 0x0E, 0xB5, 0x9E, 0x80, 0x9D, 0xA7, 0xD6,
0x56, 0x96, 0x49, 0x3B, 0xE3, 0x7E, 0xE6, 0xC6, 0xB3, 0x07,
0xE5, 0x90, 0xBE, 0x4D, 0xF1, 0xE7, 0x0D, 0x0B, 0xF5, 0x8C,
0x4A, 0xBB, 0x15, 0x5B, 0xB3, 0xB0, 0x07, 0x69, 0xE2, 0xE9,
0xA0, 0xD0, 0x40, 0x1F, 0xC0, 0x1E, 0x70, 0x25, 0xE0, 0x9D,
0x4F, 0x7F, 0x54, 0xA1, 0x23, 0x96, 0x29, 0x0C, 0x88, 0x34,
0x91, 0x19, 0x6A, 0x35, 0xE7, 0x30, 0x18, 0xAB, 0xC4, 0xC8,
0xBE, 0x4A, 0x3E, 0x1D, 0x76, 0x9F, 0xBB, 0x71, 0x16, 0x66,
0xEE, 0xAB, 0xA9, 0xCD, 0x0B, 0x52, 0x65, 0xAA, 0x76, 0xE4,
0x3F, 0x4D, 0xBF, 0x61, 0x89, 0xB1, 0x61, 0xD9, 0x9B, 0x15,
0x6D, 0xF1, 0x4F, 0xEE, 0x48, 0x66, 0x8B, 0xF1, 0xE2, 0x35,
0xFA, 0x2C, 0x92, 0x21, 0x85, 0x44, 0x24, 0xD1, 0xD4, 0x95,
0x30, 0x1E, 0xF6, 0xEA, 0x4C, 0xC6, 0x93, 0x85, 0xF6, 0x3F,
0x17, 0x70, 0xCD, 0x92, 0xD8, 0x36, 0x23, 0x57, 0x27, 0x07,
0x2A, 0x55, 0x2A, 0x03, 0xD8, 0x7F, 0x37, 0x02, 0x5E, 0xB4,
0x3B, 0x4E, 0xB4, 0x19, 0x08, 0xAB, 0xF0, 0x6A, 0x8B, 0xFB,
0xAE, 0xF1, 0xCE, 0x50, 0xF3, 0xFFFFFFFF,
0x00 };


int main(int argc, char *argv[])
{
  fp=fopen(argv[1], "wb");  /* Open file */
  num=atol(argv[2]); /* Get the number of bytes to write */
  fwrite(&filedata[0], num, 1, fp);  /* Save the data in binary format */
  fclose(fp);
}


--------------------------------------------------------------------------

If you take a look at the last line of filedata[], the End-of-file
"0xFFFFFFFF" makes its appearance once again, so you will need to delete
it, and to restore "file0001.bin" back to its original binary status, just
enter this command:

  gcc file0001.c; ./a.out file0001.bin 265

--------------------------------------------------------------------------




